{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport setAuthJWT from './setAuthJWT';\nexport const handleSubmitNewTask = newTask => {\n  return new Promise((resolve, reject) => {\n    axios.post('http://localhost:3001/todo/createtodo', newTask).then(newTodo => {}).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const handleGetAllTodoApi = () => {\n  return new Promise((resolve, reject) => {\n    let token = localStorage.getItem('jwtToken');\n    let decoded = jwt_decode(token);\n    axios.get(\"http://localhost:3001/todo?id=\".concat(decoded.id)).then(result => {\n      resolve(result);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const handleSignUpAndLogInApi = userInfo => {\n  return new Promise((resolve, reject) => {\n    let axiosConfig = {\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        'Access-Control-Allow-Origin': \"*\"\n      }\n    };\n    axios.post('http://localhost:3001/users/signupandlogin', userInfo, axiosConfig).then(result => {\n      const token = result.data.token;\n      localStorage.setItem('jwtToken', token);\n      const decoded = jwt_decode(token);\n      setAuthJWT(token);\n      resolve(decoded);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const handleJWTExpirationApi = () => {\n  return new Promise((resolve, reject) => {\n    let token = localStorage.getItem('jwtToken');\n    let currentTime = Date.now() / 1000;\n    let decoded = jwt_decode(token);\n\n    if (decoded.exp < currentTime) {\n      localStorage.removeItem('jwtToken');\n      setAuthJWT(null);\n      reject(null);\n    } else {\n      setAuthJWT(token);\n      resolve(token);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/pak/Desktop/react-term-3/react-day-2/todo/src/utils/api.js"],"names":["axios","jwt_decode","setAuthJWT","handleSubmitNewTask","newTask","Promise","resolve","reject","post","then","newTodo","catch","error","handleGetAllTodoApi","token","localStorage","getItem","decoded","get","id","result","handleSignUpAndLogInApi","userInfo","axiosConfig","headers","data","setItem","handleJWTExpirationApi","currentTime","Date","now","exp","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAAa;AAC5C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpCP,IAAAA,KAAK,CAACQ,IAAN,CAAW,uCAAX,EAAoDJ,OAApD,EACMK,IADN,CACYC,OAAO,IAAI,CAEjB,CAHN,EAIMC,KAJN,CAIaC,KAAK,IAAI;AACdL,MAAAA,MAAM,CAACK,KAAD,CAAN;AACF,KANN;AASH,GAXM,CAAP;AAYH,CAbM;AAiBP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AAErC,SAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpC,QAAIO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAZ;AACA,QAAIC,OAAO,GAAGhB,UAAU,CAACa,KAAD,CAAxB;AAEAd,IAAAA,KAAK,CAACkB,GAAN,yCAA2CD,OAAO,CAACE,EAAnD,GACMV,IADN,CACYW,MAAM,IAAI;AACdd,MAAAA,OAAO,CAACc,MAAD,CAAP;AACF,KAHN,EAIMT,KAJN,CAIaC,KAAK,IAAI;AACdL,MAAAA,MAAM,CAACK,KAAD,CAAN;AACF,KANN;AAOH,GAZM,CAAP;AAaH,CAfM;AAiBP,OAAO,MAAMS,uBAAuB,GAAIC,QAAD,IAAc;AAEjD,SAAO,IAAIjB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpC,QAAIgB,WAAW,GAAG;AACdC,MAAAA,OAAO,EAAE;AACL,wBAAgB,gCADX;AAEL,uCAA+B;AAF1B;AADK,KAAlB;AAOAxB,IAAAA,KAAK,CAACQ,IAAN,CAAW,4CAAX,EAAyDc,QAAzD,EAAmEC,WAAnE,EACMd,IADN,CACYW,MAAM,IAAI;AAAA,YAENN,KAFM,GAEIM,MAAM,CAACK,IAFX,CAENX,KAFM;AAIdC,MAAAA,YAAY,CAACW,OAAb,CAAqB,UAArB,EAAiCZ,KAAjC;AAEA,YAAMG,OAAO,GAAGhB,UAAU,CAACa,KAAD,CAA1B;AAEAZ,MAAAA,UAAU,CAACY,KAAD,CAAV;AAEAR,MAAAA,OAAO,CAACW,OAAD,CAAP;AAEF,KAbN,EAcMN,KAdN,CAcaC,KAAK,IAAI;AACbL,MAAAA,MAAM,CAACK,KAAD,CAAN;AACH,KAhBN;AAmBH,GA5BM,CAAP;AA6BH,CA/BM;AAiCP,OAAO,MAAMe,sBAAsB,GAAG,MAAM;AAExC,SAAO,IAAItB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpC,QAAIO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAZ;AACA,QAAIY,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAA/B;AACA,QAAIb,OAAO,GAAGhB,UAAU,CAACa,KAAD,CAAxB;;AAEA,QAAIG,OAAO,CAACc,GAAR,GAAcH,WAAlB,EAA+B;AAC3Bb,MAAAA,YAAY,CAACiB,UAAb,CAAwB,UAAxB;AACA9B,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAK,MAAAA,MAAM,CAAC,IAAD,CAAN;AACH,KAJD,MAIO;AACHL,MAAAA,UAAU,CAACY,KAAD,CAAV;AACAR,MAAAA,OAAO,CAACQ,KAAD,CAAP;AACH;AACJ,GAdM,CAAP;AAeH,CAjBM","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport setAuthJWT from './setAuthJWT';\n\nexport const handleSubmitNewTask = (newTask) => {\n    return new Promise((resolve, reject) => {\n\n        axios.post('http://localhost:3001/todo/createtodo', newTask)\n             .then( newTodo => {\n\n             })\n             .catch( error => {\n                reject(error)\n             })\n\n\n    });\n}\n\n\n\nexport const handleGetAllTodoApi = () => {\n\n    return new Promise((resolve, reject) => {\n\n        let token = localStorage.getItem('jwtToken');\n        let decoded = jwt_decode(token);\n\n        axios.get(`http://localhost:3001/todo?id=${decoded.id}`)\n             .then( result => {\n                resolve(result);\n             })\n             .catch( error => {\n                reject(error);\n             });\n    });\n}\n\nexport const handleSignUpAndLogInApi = (userInfo) => {\n\n    return new Promise((resolve, reject) => {\n\n        let axiosConfig = {\n            headers: {\n                'Content-Type': 'application/json;charset=UTF-8',\n                'Access-Control-Allow-Origin': \"*\"\n            }\n        };\n\n        axios.post('http://localhost:3001/users/signupandlogin', userInfo, axiosConfig)\n             .then( result => {\n\n                const { token } = result.data;\n\n                localStorage.setItem('jwtToken', token);\n\n                const decoded = jwt_decode(token);\n\n                setAuthJWT(token);\n\n                resolve(decoded);\n\n             })\n             .catch( error => {\n                 reject(error);\n             })\n    \n\n    });\n}\n\nexport const handleJWTExpirationApi = () => {\n\n    return new Promise((resolve, reject) => {\n\n        let token = localStorage.getItem('jwtToken');\n        let currentTime = Date.now() / 1000;\n        let decoded = jwt_decode(token);\n\n        if (decoded.exp < currentTime) {\n            localStorage.removeItem('jwtToken');\n            setAuthJWT(null);\n            reject(null);\n        } else {\n            setAuthJWT(token);\n            resolve(token);\n        }\n    });\n}"]},"metadata":{},"sourceType":"module"}