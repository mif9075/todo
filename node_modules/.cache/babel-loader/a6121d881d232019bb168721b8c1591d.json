{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport setAuthJWT from './setAuthJWT';\nexport const handleSubmitNewTask = (newTask, oldStateArray) => {\n  return new Promise((resolve, reject) => {\n    let token = localStorage.getItem('jwtToken');\n    let decoded = jwt_decode(token);\n    let newObj = {\n      todo: newTask,\n      id: decoded.id\n    };\n    let axiosConfig = {\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post('http://localhost:3001/todo/createtodo', newObj, axiosConfig).then(newTodo => {\n      let currentTaskArray = [...oldStateArray];\n      currentTaskArray.push(newTodo.data);\n      resolve(currentTaskArray);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const handleGetAllTodoApi = () => {\n  return new Promise((resolve, reject) => {\n    let token = localStorage.getItem('jwtToken');\n    let decoded = jwt_decode(token);\n    axios.get(\"http://localhost:3001/todo?id=\".concat(decoded.id)).then(result => {\n      resolve(result);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const handleSignUpAndLogInApi = userInfo => {\n  return new Promise((resolve, reject) => {\n    let axiosConfig = {\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        'Access-Control-Allow-Origin': \"*\"\n      }\n    };\n    axios.post('http://localhost:3001/users/signupandlogin', userInfo, axiosConfig).then(result => {\n      const token = result.data.token;\n      localStorage.setItem('jwtToken', token);\n      const decoded = jwt_decode(token);\n      setAuthJWT(token);\n      resolve(decoded);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const handleJWTExpirationApi = () => {\n  return new Promise((resolve, reject) => {\n    let token = localStorage.getItem('jwtToken');\n    let currentTime = Date.now() / 1000;\n    let decoded = jwt_decode(token);\n\n    if (decoded.exp < currentTime) {\n      localStorage.removeItem('jwtToken');\n      setAuthJWT(null);\n      reject(null);\n    } else {\n      setAuthJWT(token);\n      resolve(token);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/pak/Desktop/react-term-3/react-day-2/todo/src/utils/api.js"],"names":["axios","jwt_decode","setAuthJWT","handleSubmitNewTask","newTask","oldStateArray","Promise","resolve","reject","token","localStorage","getItem","decoded","newObj","todo","id","axiosConfig","headers","post","then","newTodo","currentTaskArray","push","data","catch","error","handleGetAllTodoApi","get","result","handleSignUpAndLogInApi","userInfo","setItem","handleJWTExpirationApi","currentTime","Date","now","exp","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport setAuthJWT from './setAuthJWT';\n\nexport const handleSubmitNewTask = (newTask, oldStateArray) => {\n    return new Promise((resolve, reject) => {\n\n        let token = localStorage.getItem('jwtToken');\n        let decoded = jwt_decode(token);\n\n        let newObj = {\n            todo: newTask,\n            id: decoded.id\n          }\n\n        let axiosConfig = {\n            headers: {\n                'Content-Type': 'application/json;charset=UTF-8',\n                'Access-Control-Allow-Origin': '*'\n            }\n        }\n\n        axios.post('http://localhost:3001/todo/createtodo', newObj, axiosConfig)\n             .then( newTodo => {\n\n                let currentTaskArray = [...oldStateArray];\n                currentTaskArray.push(newTodo.data);\n                resolve(currentTaskArray);\n\n             })\n             .catch( error => {\n                reject(error)\n             })\n\n\n    });\n}\n\n\n\nexport const handleGetAllTodoApi = () => {\n\n    return new Promise((resolve, reject) => {\n\n        let token = localStorage.getItem('jwtToken');\n        let decoded = jwt_decode(token);\n\n        axios.get(`http://localhost:3001/todo?id=${decoded.id}`)\n             .then( result => {\n                resolve(result);\n             })\n             .catch( error => {\n                reject(error);\n             });\n    });\n}\n\nexport const handleSignUpAndLogInApi = (userInfo) => {\n\n    return new Promise((resolve, reject) => {\n\n        let axiosConfig = {\n            headers: {\n                'Content-Type': 'application/json;charset=UTF-8',\n                'Access-Control-Allow-Origin': \"*\"\n            }\n        };\n\n        axios.post('http://localhost:3001/users/signupandlogin', userInfo, axiosConfig)\n             .then( result => {\n\n                const { token } = result.data;\n\n                localStorage.setItem('jwtToken', token);\n\n                const decoded = jwt_decode(token);\n\n                setAuthJWT(token);\n\n                resolve(decoded);\n\n             })\n             .catch( error => {\n                 reject(error);\n             })\n    \n\n    });\n}\n\nexport const handleJWTExpirationApi = () => {\n\n    return new Promise((resolve, reject) => {\n\n        let token = localStorage.getItem('jwtToken');\n        let currentTime = Date.now() / 1000;\n        let decoded = jwt_decode(token);\n\n        if (decoded.exp < currentTime) {\n            localStorage.removeItem('jwtToken');\n            setAuthJWT(null);\n            reject(null);\n        } else {\n            setAuthJWT(token);\n            resolve(token);\n        }\n    });\n}"]},"metadata":{},"sourceType":"module"}